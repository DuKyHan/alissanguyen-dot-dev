/* <div className="skills-title">My Skills</div> */
.skills-title {
  position: relative;
  display: inline-block;
  font-size: 24px;
  margin-bottom: 40px;
  font-size: 7rem;
  font-weight: 700;
}
.skills-title:before {
  content: "";
  display: block;
  position: absolute;
  top: -2rem;
  /* top: -8px; */
  height: 3px;
  background-color: black;
  animation: heading-before 4s ease infinite;
}
.skills-title:after {
  content: "";
  display: block;
  position: absolute;
  bottom: -3rem;
  right: 0;
  height: 3.5px;
  background-color: black;
  animation: heading-after 4s ease infinite;
}

@keyframes heading-before {
  0% {
    right: auto;
    width: 0;
    left: 0;
  }
  10% {
    width: 50%;
  }
  50% {
    width: 0;
    left: 100%;
  }
  51% {
    width: 0;
    right: 0;
    left: auto;
  }
  60% {
    width: 50%;
  }
  99% {
    width: 0;
    right: 100%;
    left: auto;
  }
  100% {
    right: auto;
    width: 0;
    left: 0;
  }
}
@keyframes heading-after {
  0% {
    left: auto;
    width: 0;
    right: 0;
  }
  10% {
    width: 50%;
    left: auto;
  }
  50% {
    width: 0;
    right: 100%;
    left: auto;
  }
  51% {
    width: 0;
    left: 0;
    right: auto;
  }
  60% {
    width: 50%;
  }
  99% {
    width: 0;
    left: 100%;
    right: atuo;
  }
  100% {
    left: auto;
    width: 0;
    right: 0;
  }
}

// ALTERNATIVE DESIGN
.skill-card {
  background: rgba(255, 255, 255, 0.541);
  box-shadow: 0 35px 68px 0 rgba(136, 174, 222, 0.42),
    inset 0 -8px 16px 0 #b9d1f1;
  backdrop-filter: blur(15px);
  z-index: 10; 
}
.ability-card {
    box-shadow: 24px 24px 48px rgba(174, 210, 236, 0.4),
    inset 12px 12px 24px #e7f2f9, inset -24px -24px 48px #b8d8ee;
}

import * as React from "react";

interface Props {}

const CustomCursor: React.FC<Props> = ({}) => {
  React.useEffect(() => {
    const cursor = document.querySelector(".custom-cursor");

    if (cursor) {
      document.addEventListener("mousemove", (e) => {
        cursor.setAttribute(
          "style",
          "top: " + (e.pageY - 60) + "px; left: " + (e.pageX - 60) + "px"
        );
      });

      document.addEventListener("click", (e) => {
        console.log(e.target);
        cursor.classList.add("click");
        setTimeout(() => {
          cursor.classList.remove("click");
        }, 500);
      });
    }
  });

  return <div className="custom-cursor"></div>;
};

export default CustomCursor;

.custom-cursor {
  pointer-events: none;
  position: absolute;
  width: 80px;
  height: 80px;
  background: radial-gradient(circle, #000 0%, #000 3.99%, #fff 4%, #fff 100%);
  border-radius: 50%;
  mix-blend-mode: exclusion;
  background: radial-gradient(
    circle,
    #fff 0%,
    #fff 3.99%,
    #000 4%,
    #000 49.99%,
    #fff 50%,
    #fff 100%
  );
}
.custom-cursor.click {
  animation: click 0.3s ease-in-out;
}
@keyframes click {
  0% {
    transform: scale(1);
  }
  5% {
    transform: scale(1.3);
  }
  100% {
    transform: scale(1);
  }
}

export const CustomCursor = () => {
  const [coords, setCoords] = React.useState({ x: 0, y: 0 });

  const [cursorType, setCursorType] = React.useState(CursorType.NORMAL);

  React.useEffect(() => {
    window.addEventListener("mousemove", (e) => {
      setCoords({ x: e.pageX, y: e.pageY });
    });
  }, []);
  return (
    <div>
      <div
        style={{
          position: "absolute",
          top: coords.y,
          left: coords.x
        }}
        className="custom-cursor first-cursor"
      ></div>
      <div
        style={{
          position: "absolute",
          top: coords.y,
          left: coords.x
        }}
        className={
          "custom-cursor absolute first-cursor" + (cursorType === CursorType.BIG)
            ? "big"
            : ""
        }
      ></div>
      <div
        style={{
          position: "absolute",
          top: coords.y,
          left: coords.x
        }}
        className="custom-cursor first-cursor"
      ></div>
      <div
        style={{
          position: "absolute",
          top: coords.y,
          left: coords.x
        }}
        className={
          "custom-cursor absolute second-cursor" + (cursorType === CursorType.BIG)
            ? "big"
            : ""
        }
      ></div>
    </div>
  );
};


import * as React from "react";
import gsap from "gsap";
import { CursorState } from "~/types";

interface Props {}

const Cursor: React.FC<Props> = ({}) => {
  const [cursorState, setCursorState] = React.useState<CursorState>(
    CursorState.DEFAULT
  );
  const cursorRefs = React.useRef<CirclesType[]>([]);

  // reset on re-renders
  cursorRefs.current = [];

  React.useEffect(() => {
    const onMove = (event: PointerEvent) => {
      cursorRefs.current.forEach((ref) =>
        ref.moveTo(event.clientX, event.clientY)
      );
    };

    window.addEventListener("pointermove", onMove);

    return () => window.removeEventListener("pointermove", onMove);
  });

  const addCircleRef = (ref: CirclesType) => {
    if (ref) {
      cursorRefs.current.push(ref);
    }
  };

  return (
    <div className="Circle__Container">
      <Circles size="sm" ref={addCircleRef} state={cursorState} delay={0} />
      <Circles size="md" ref={addCircleRef} state={cursorState} delay={0.1} />
      <Circles size="lg" ref={addCircleRef} state={cursorState} delay={0.22} />
    </div>
  );
};

export default Cursor;

interface CirclesProps {
  size: string;
  delay: number;
  state: CursorState;
  children?: JSX.Element;
}

export type CirclesType = typeof Circles & {
  moveTo: (x: number, y: number) => void;
};

const Circles = React.forwardRef((props: CirclesProps, forwardedRef) => {
  const el = React.useRef(null);
  const delay = props.delay;
  React.useImperativeHandle(
    forwardedRef,
    () => {
      // return our API
      return {
        moveTo: (x: number, y: number) => {
          gsap.to(el.current, { x, y, delay });
        }
      };
    },
    [delay]
  );

  return (
    <div className={`circle ${props.state} ${props.size}`} ref={el}>
      {props.children}
    </div>
  );
});

enum CursorType {
  NORMAL,
  BIG
}

export enum CursorState {
  DEFAULT = "default",
  ACTIVE = "active",
}


.recent-title {
  background: linear-gradient(to right, #30cfd0 0%, #330867 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}